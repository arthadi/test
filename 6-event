import fetchJson from './utils/fetch-json.js';
const BACKEND_URL = 'https://course-js.javascript.ru';

export default class ColumnChart {

  chartHeight = 50;

  constructor({
    label = '',
    link = '',
    formatHeading = data => data,
    url = '',
    range = {},
    } = {}) {
    this.url = new URL(url, BACKEND_URL);
    this.range = range;
    this.label = label;
    this.link = link;
    this.formatHeading = formatHeading;
    this.render();
    this.showChart();
  }

  createFullUrl(range, url) {
    Object.entries(range).forEach(([key, value]) => url.searchParams.set(key, value));
  }

  async getData (range, url) {
    await this.createFullUrl(range, url);
    const data = await fetchJson(this.url.toString());
    return await data;
  }

  downloadСharts(headerData, bodyData = []) {
    this.element.classList.add('column-chart_loading');

    if (headerData && bodyData.size) {
      this.subElements.header.textContent = headerData;
      this.subElements.body.innerHTML = this.createChart(bodyData);
      this.element.classList.remove('column-chart_loading');
    }
  }

  async showChart () {
    let value = await this.getData(this.range, this.url);
    this.mapDataFromAllTime = await new Map(Object.entries(value));
    await this.downloadСharts(this.getNumberData(), this.mapDataFromAllTime);
  }

  async update(from, to) {
    this.range = await {from, to};
    await this.showChart();
  }

  get template() {
    return `<div class="column-chart column-chart_loading" style="--chart-height: ${this.chartHeight}">
      <div class="column-chart__title">${this.label}${this.checkLink()}</div>
      <div class="column-chart__container">
        <div data-element="header" class="column-chart__header">
            ${this.getNumberData()}
        </div>
        <div data-element="body" class="column-chart__chart">
            ${this.createChart(this.mapDataFromAllTime)}
        </div>
      </div>
    </div>
    `;
  }

   render() {
   const element = document.createElement('div');
   element.innerHTML = this.template;
   this.element = element.firstElementChild;
   this.subElements = this.getSubElements(this.element);
  }

  getSubElements(element) {
    const elements = element.querySelectorAll('[data-element]');
    return [...elements].reduce((accum, subElement) => {
      accum[subElement.dataset.element] = subElement;
      return accum;
    }, {});
  }

  getNumberData() {

    if (this.mapDataFromAllTime) {
      const sum = [...this.mapDataFromAllTime.values()].reduce((accum, next) => accum + next);

      if (this.formatHeading) {
        return this.formatHeading(sum);
      }
      this.formatHeading = sum;
      return  sum;

    } else {
      return 1;
    }
  }

  checkLink() {
    return this.link ? this.appendLink() : '';
  }

  appendLink() {
    return `<a class="column-chart__link" href="${this.link}">View all</a>`;
  }

  getColumnProps(data) {
    const arrayParametrs = data ? [...data.values()] : [];

    if (arrayParametrs.length) {
      const maxValue = Math.max(...arrayParametrs);
      const scale = this.chartHeight / maxValue;
      return new Map([...arrayParametrs.map(item => {
        return [(item / maxValue * 100).toFixed(0) + '%', String(Math.floor(item * scale))];
      })]);
    }
  }

  createChart(data) {
    const arrayData = this.getColumnProps(data);

    if (arrayData) {
      return [...arrayData].map(([key, value]) => `<div style="--value: ${value}" data-tooltip="${key}"></div>`).join('');
    }
  }

  remove () {
    this.element.remove();
  }

  destroy() {
    this.remove();
    // NOTE: удаляем обработчики событий, если они есть
  }
}
